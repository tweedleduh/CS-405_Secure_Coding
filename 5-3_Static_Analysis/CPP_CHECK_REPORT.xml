<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.3"/>
    <errors>
        <error id="assignmentInAssert" severity="warning" msg="Assert statement modifies &amp;#039;z&amp;#039;." verbose="Variable &amp;#039;z&amp;#039; is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398" hash="6007681985709928335" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="127"/>
        </error>
        <error id="assertWithSideEffect" severity="warning" msg="Assert statement calls a function which may have desired side effects: &amp;#039;my_function&amp;#039;." verbose="Non-pure function: &amp;#039;my_function&amp;#039; is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." cwe="398" hash="4419335787929785619" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="129"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" hash="17389285547943000143" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="109"/>
        </error>
        <error id="autoVariables" severity="error" msg="Address of local auto-variable assigned to a function parameter." verbose="Dangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends." cwe="562" hash="11707175318152312708" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="59"/>
        </error>
        <error id="compareBoolExpressionWithInt" severity="warning" msg="Comparison of a boolean expression with an integer other than 0 or 1." verbose="Comparison of a boolean expression with an integer other than 0 or 1." cwe="398" hash="14743440233511443716" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="129"/>
        </error>
        <error id="returnNonBoolInBooleanFunction" severity="style" msg="Non-boolean value returned from function returning bool" verbose="Non-boolean value returned from function returning bool" hash="10530560339775900090" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="98"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;count==1000&amp;#039; is redundant or the array &amp;#039;buf[10]&amp;#039; is accessed at index 1000, which is out of bounds." verbose="Either the condition &amp;#039;count==1000&amp;#039; is redundant or the array &amp;#039;buf[10]&amp;#039; is accessed at index 1000, which is out of bounds." cwe="788" hash="1519398174201129362" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="66" info="Array index out of bounds"/>
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="65" info="Assuming that condition &amp;#039;count==1000&amp;#039; is not redundant"/>
        </error>
        <error id="uninitMemberVarPrivate" severity="warning" msg="Member variable &amp;#039;A::x&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;A::x&amp;#039; is not initialized in the constructor." cwe="398" hash="116476124205574864" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="42"/>
        </error>
        <error id="throwInNoexceptFunction" severity="error" msg="Exception thrown in function declared not to throw exceptions." verbose="Exception thrown in function declared not to throw exceptions." cwe="398" hash="15477882100333756191" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="52"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;tok&amp;#039; is redundant or there is possible null pointer dereference: tok." verbose="Either the condition &amp;#039;tok&amp;#039; is redundant or there is possible null pointer dereference: tok." cwe="476" hash="16797763016821708877" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="109" info="Null pointer dereference"/>
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="108" info="Assuming that condition &amp;#039;tok&amp;#039; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" hash="3193070779733624940" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="64"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;x&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;x&amp;#039; shadows outer variable" cwe="398" hash="11769386670779321895" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="133" info="Shadow variable"/>
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="117" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;y&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;y&amp;#039; shadows outer variable" cwe="398" hash="1024586703152499544" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="134" info="Shadow variable"/>
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="118" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;z&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;z&amp;#039; shadows outer variable" cwe="398" hash="14628329105582869434" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="135" info="Shadow variable"/>
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="119" info="Shadowed declaration"/>
        </error>
        <error id="invalidContainer" severity="error" msg="Using iterator to local container &amp;#039;items&amp;#039; that may be invalid." verbose="Using iterator to local container &amp;#039;items&amp;#039; that may be invalid." cwe="664" hash="11936913157471571033" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="87" info=""/>
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="82" info="Variable created here."/>
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="89" info="After calling &amp;#039;erase&amp;#039;, iterators or references to the container&amp;#039;s data may be invalid ."/>
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="87" info="Assuming condition is true."/>
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="88" info="Assuming condition is true."/>
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="87" info="Iterator to container is created here."/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;buf[count]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;buf[count]&amp;#039; is assigned a value that is never used." cwe="563" hash="11451531113237746596" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="66"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tok&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tok&amp;#039; is assigned a value that is never used." cwe="563" hash="11713161996803268369" sinceDate="4/11/2021">
            <location file0="5-3_Static_Analysis/QuestionableCode.cpp" file="5-3_Static_Analysis\QuestionableCode.cpp" line="109"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DontThrow&amp;#039; is never used." verbose="The function &amp;#039;DontThrow&amp;#039; is never used." cwe="561" sinceDate="4/11/2021">
            <location file="5-3_Static_Analysis\QuestionableCode.cpp" line="50"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;do_something_useless&amp;#039; is never used." verbose="The function &amp;#039;do_something_useless&amp;#039; is never used." cwe="561" sinceDate="4/11/2021">
            <location file="5-3_Static_Analysis\QuestionableCode.cpp" line="69"/>
        </error>
    </errors>
</results>
